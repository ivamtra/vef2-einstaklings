datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                     Int             @id @default(autoincrement())
  name                   String?
  email                  String          @unique
  hashedPassword         String
  salt                   String
  resetToken             String?
  profilePic             String?         @default("https://firebasestorage.googleapis.com/v0/b/new-facebook-ace12.appspot.com/o/images%2Fmark.jpeg?alt=media&token=7a8e11b8-3414-4b6e-8fc8-31e1767f159c")
  resetTokenExpiresAt    DateTime?
  createdAt              DateTime        @default(now())
  friends                Friendship[]
  posts                  Post[]
  comments               Comment[]
  sentFriendRequests     FriendRequest[] @relation("sender")
  recievedFriendRequests FriendRequest[] @relation("reciever")
  messagesSent           Message[]       @relation("sender")
  messagesRecieved       Message[]       @relation("reciever")
  Like                   Like[]
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId1   Int
  userId2   Int
  createdAt DateTime @default(now())
  // Nog að hafa eina tengingu við user því þetta er 2 way tenging
  user      User     @relation(fields: [userId1], references: [id])

  @@unique([userId1, userId2])
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  // Nog að hafa eina tengingu við user því þetta er 2 way tenging
  sender     User     @relation("sender", fields: [senderId], references: [id])
  senderId   Int
  reciever   User     @relation("reciever", fields: [recieverId], references: [id])
  recieverId Int
  hidden     Boolean  @default(false)

  @@unique([recieverId, senderId])
}

model Like {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  body      String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  Comment   Comment[]
  Like      Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  body      String
  createdAt DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  message    String
  recieverId Int
  senderId   Int
  createdAt  DateTime @default(now())
  reciever   User     @relation("reciever", fields: [recieverId], references: [id])
  sender     User     @relation("sender", fields: [senderId], references: [id])
}
